# This workflow allows for ad-hoc creation of release tags without date checking requirements.
# It can be triggered manually via GitHub Actions UI or API.
name: Build release tag

on:
    workflow_dispatch:
        inputs:
            release_type:
                description: 'Type of release'
                required: false
                default: 'minor'
                type: choice
                options:
                    - major
                    - minor
                    - patch
            trigger_source:
                description: 'Trigger automatically or adhoc'
                required: false
                default: 'cutoff'
                type: choice
                options:
                    - adhoc
                    - cutoff

jobs:
    generate-release:
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

            - name: Generate release tag
              id: tag
              run: |
                  # Fetch all tags from remote
                  git fetch --tags

                  # Get the latest version tag from git (format v*.*.*)
                  LATEST_TAG=$(git tag -l "v*.*.*" | sort -V | tail -n 1)
                  echo "LATEST_TAG=$LATEST_TAG"

                  # If no tags exist yet, start with v1.0.0
                  if [ -z "$LATEST_TAG" ]; then
                    TAG_NAME="v1.0.0"
                  else
                    # Extract version numbers (remove 'v' prefix)
                    MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | sed 's/v//')
                    MINOR=$(echo $LATEST_TAG | cut -d. -f2)
                    PATCH=$(echo $LATEST_TAG | cut -d. -f3)

                    # Increment version based on release type
                    case "${{ inputs.release_type }}" in
                      "major")
                        NEW_MAJOR=$((MAJOR + 1))
                        NEW_MINOR=0
                        NEW_PATCH=0
                        ;;
                      "minor")
                        NEW_MAJOR=$MAJOR
                        NEW_MINOR=$((MINOR + 1))
                        NEW_PATCH=0
                        ;;
                      "patch")
                        NEW_MAJOR=$MAJOR
                        NEW_MINOR=$MINOR
                        NEW_PATCH=$((PATCH + 1))
                        ;;
                    esac
                    
                    # Create new tag
                    TAG_NAME="v${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
                  fi

                  # Set output variable for use in later steps
                  echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
                  # Log the tag being created
                  echo "Creating tag: ${TAG_NAME}"

            - name: Create GitHub Release
              uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2.2.2
              with:
                  tag_name: ${{ steps.tag.outputs.tag_name }}
                  name: '${{ steps.tag.outputs.tag_name }}'
                  body: |
                      ${{ inputs.trigger_source == 'cutoff' && 'Automated cutoff build' || 'Ad-hoc release build' }}
                      Build profile: Production
                      Release type: ${{ inputs.release_type }}
                      GitHub Actions workflow: ${{ github.workflow }}
                      Triggered by: ${{ github.actor }}
                      Trigger source: ${{ inputs.trigger_source }}
                  generate_release_notes: true
                  prerelease: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Echo Success Message
              if: success()
              run: |
                echo "✅ ${{ github.workflow }} - ${{ inputs.trigger_source == 'cutoff' && 'Cutoff' || 'Ad-hoc' }} release ${{ steps.tag.outputs.tag_name }} created successfully by ${{ github.actor }}."

            - name: Echo Failure Message
              if: failure()
              run: |
                echo "❌ ${{ github.workflow }} Failed: Please check the logs for more details."
