# This workflow allows for ad-hoc creation of release tags without date checking requirements.
# It can be triggered manually via GitHub Actions UI or API.
name: Build release tag

on:
    workflow_dispatch:
        inputs:
            trigger_source:
                description: 'Release trigger source'
                required: false
                default: 'cutoff'
                type: choice
                options:
                    - cutoff
                    - adhoc
                    - stable
                    - hotfix
    workflow_call:
        inputs:
            trigger_source:
              required: false
              type: string
              default: 'cutoff'

jobs:
# Cutoff: Bump minor version and create -rc-0
# Adhoc: Use latest rc version and bump rc + 1
# Stable: Use latest version and remove -rc-X and create prerelease: false
# Hotfix: Use latest version, bump patch version and create -rc-0

#Workflow: Cutoff > Adhoc > Stable
#Example: If cutoff is 1.2.0-rc-0, then adhoc will be 1.2.0-rc-1, and stable will be 1.2.0

#Workflow (hotfix): Hotfix > Adhoc > Stable
#Example: If stable is 1.2.0 then hotfix will be 1.2.1-rc-0, adhoc will be 1.2.1-rc-1, then stable will be 1.2.1

    generate-release-tag:
        runs-on: ubuntu-latest
        outputs:
            tag_name: ${{ steps.tag.outputs.tag_name }}
        permissions:
            contents: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

            - name: Check if release tag should be created
              id: tag
              run: |
                  # Fetch all tags
                  git fetch --tags
                  TAGS=$(git tag)
                  
                  LATEST_STABLE=$(echo "$TAGS" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
                  LATEST_RC=$(echo "$TAGS" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+-rc-[0-9]+$' | sort -V | tail -n 1)

                  # Fallback to v0.0.0 if no stable release exists
                  if [[ -z "$LATEST_STABLE" ]]; then
                    LATEST_STABLE="v0.0.0"
                  fi

                  if [[ "${{ inputs.trigger_source }}" == "cutoff" ]]; then
                    # Cutoff: Bump minor version and create -rc-0
                    MAJOR=$(echo "$LATEST_STABLE" | cut -d. -f1 | cut -dv -f2)
                    MINOR=$(echo "$LATEST_STABLE" | cut -d. -f2)
                    NEXT_MINOR=$((MINOR + 1))
                    tag_name="v${MAJOR}.${NEXT_MINOR}.0-rc-0"
                  elif [[ "${{ inputs.trigger_source }}" == "adhoc" ]]; then
                    # Adhoc: Use latest rc version and bump rc + 1
                    if [[ -z "$LATEST_RC" ]]; then
                      echo "Error: No RC tags found for adhoc release"
                      exit 1
                    fi
                    RC_BASE=$(echo "$LATEST_RC" | cut -d'-' -f1)
                    RC_NUM=$(echo "$LATEST_RC" | grep -oE 'rc-[0-9]+' | cut -d- -f2)
                    NEXT_RC_NUM=$((RC_NUM + 1))
                    tag_name="${RC_BASE}-rc-${NEXT_RC_NUM}"
                  elif [[ "${{ inputs.trigger_source }}" == "stable" ]]; then
                    # Stable: Use latest rc version and remove -rc-X
                    if [[ -z "$LATEST_RC" ]]; then
                      echo "Error: No RC tags found for stable release"
                      exit 1
                    fi
                    tag_name=$(echo "$LATEST_RC" | cut -d'-' -f1)
                  elif [[ "${{ inputs.trigger_source }}" == "hotfix" ]]; then
                    # Hotfix: Use latest stable, bump patch version and create -rc-0
                    MAJOR=$(echo "$LATEST_STABLE" | cut -d. -f1 | cut -dv -f2)
                    MINOR=$(echo "$LATEST_STABLE" | cut -d. -f2)
                    PATCH=$(echo "$LATEST_STABLE" | cut -d. -f3)
                    NEXT_PATCH=$((PATCH + 1))
                    tag_name="v${MAJOR}.${MINOR}.${NEXT_PATCH}-rc-0"
                  fi

                  echo "Latest stable: $LATEST_STABLE"
                  echo "Latest RC:     $LATEST_RC"
                  echo "Next version:  $tag_name"

                  # Export for GitHub Actions
                  echo "tag_name=$tag_name" >> $GITHUB_OUTPUT

    generate-gh-release:
        needs: generate-release-tag
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - name: Create GitHub Release
              uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2.2.2
              with:
                  tag_name: ${{ needs.generate-release-tag.outputs.tag_name }}
                  name: '${{ needs.generate-release-tag.outputs.tag_name }}'
                  body: |
                      ${{ inputs.trigger_source == 'cutoff' && 'Automated cutoff build' || inputs.trigger_source == 'hotfix' && 'Hotfix release build' || inputs.trigger_source == 'stable' && 'Stable release build' || 'Ad-hoc release build' }}
                      Build profile: Production
                      GitHub Actions workflow: ${{ github.workflow }}
                      Triggered by: ${{ github.actor }}
                      Trigger source: ${{ inputs.trigger_source }}
                  generate_release_notes: true
                  prerelease: ${{ inputs.trigger_source != 'stable' }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Echo Success Message
              if: success()
              run: |
                echo "✅ ${{ github.workflow }} - ${{ inputs.trigger_source }} release ${{ needs.generate-release-tag.outputs.tag_name }} created successfully by ${{ github.actor }}."

            - name: Echo Failure Message
              if: failure()
              run: |
                echo "❌ ${{ github.workflow }} Failed: Please check the logs for more details."
